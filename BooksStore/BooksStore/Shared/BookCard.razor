
<div style="@BackgroundStyle"
@attributes="UserAttributes" class="card">
    <h6>@Book?.Title</h6>
    <p>Author: @Book?.AuthorName</p>
    <p>Publishing Date: @Book?.PublishingDate</p>
    @if (WithButton)
    {
        <button class="main-button"
        @onclick="AddToCart"
        >Add to Cart</button>
    }
    
</div>

@code {
    [Parameter][EditorRequired]
    public Book? Book { get; set; }
    [Parameter]
    public bool WithButton { get; set; } = true;
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string,object>? UserAttributes { get; set; }

    [Parameter]
    public EventCallback<Book?> OnAddToCartClicked { get; set; }
    [CascadingParameter]
    public string? BackgroundStyle { get; set; }

    private void AddToCart()
    {
        OnAddToCartClicked.InvokeAsync(Book);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(BackgroundStyle), out var value))
        {

            if (string.IsNullOrWhiteSpace(value))
            {

                BackgroundStyle = "background-color:yellow";
                Console.WriteLine($"background style value: {BackgroundStyle}");
                
            }

        }
        await base.SetParametersAsync(parameters);
    }
    // Validate the Book parameter and throws an exception
    // if it's null
    protected override void OnParametersSet()
    {
        if (Book == null)
            throw new ArgumentNullException(nameof(Book));
        else
        {
            Console.WriteLine(Book.Title);
        }
    }
}
