@inject NavigationManager Navigation

<div style="@BackgroundStyle"
@attributes="UserAttributes" class="card"
@onclick="NavigateToBookDetails" >
    <h6>@Book?.Title</h6>
    <p>Author: @Book?.AuthorName</p>
    <p>Publishing Date: @Book?.PublishingDate</p>
    @if (WithButton)
    {
        <AuthorizeView Policy="UK_Customer">
            <Authorized>
                <button class="main-button"
                @onclick="AddToCart" @onclick:stopPropagation="true">
                    Add to Cart
                </button>
            </Authorized>
            <NotAuthorized>
                <p class="text-center">
                    Books only available for sale in UK for the time being.
                </p>
            </NotAuthorized>
        </AuthorizeView>
       
    }
    
</div>

@code {
    private string _oldBookId = string.Empty;
    private bool _shouldRender = false;

    [Parameter][EditorRequired]
    public Book? Book { get; set; }
    [Parameter]
    public bool WithButton { get; set; } = true;
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string,object>? UserAttributes { get; set; }

    [Parameter]
    public EventCallback<Book?> OnAddToCartClicked { get; set; }
    [CascadingParameter]
    public string? BackgroundStyle { get; set; }

    private void AddToCart()
    {
        OnAddToCartClicked.InvokeAsync(Book);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(BackgroundStyle), out var value))
        {

            if (string.IsNullOrWhiteSpace(value))
            {

                BackgroundStyle = "background-color:yellow";
                Console.WriteLine($"background style value: {BackgroundStyle}");

            }

        }
        await base.SetParametersAsync(parameters);
    }
    // Validate the Book parameter and throws an exception
    // if it's null
    protected override void OnParametersSet()
    {
        if (Book == null)
            throw new ArgumentNullException(nameof(Book));
        if (Book.Id.Equals(_oldBookId))
        {
            _oldBookId = Book.Id;
            _shouldRender = true;
        }
        else
        {
            _shouldRender = false;
        }
    }

    private void NavigateToBookDetails()
    {
        var url = $"/book/{Book!.Id}";
        Navigation.NavigateTo(url);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"BookCard redered for book: {Book?.Title}");
    }
    protected override bool ShouldRender()
    {
        return _shouldRender;
    }
}
