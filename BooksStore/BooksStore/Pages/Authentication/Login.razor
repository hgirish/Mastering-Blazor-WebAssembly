@page "/authentication/login"
@using Blazored.LocalStorage;
@using BooksStore.Exceptions;
@layout UserLayout
@inject IAuthenticationService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login to BooksStore</PageTitle>

<h2>Welcome to BooksStore!</h2>
<div class="row">
    <dir class="col-sm-12 col-md-4">
        <EditForm Model="_model"
            OnValidSubmit="SubmitLoginFormAsync">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="@_model.Username" class="form-control" />
                <ValidationMessage For="@(() => _model.Username)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText type="password" 
                    @bind-Value="@_model.Password" class="form-control" />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">
                Login
            </button>
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="alert alert-danger my-2">@_errorMessage</div>
            }
        </EditForm>
    </dir>
</div>

@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    private LoginRequest _model = new();
    private string _errorMessage { get; set; } = string.Empty;

    private async Task SubmitLoginFormAsync()
    {
        _errorMessage = string.Empty;
        try
        {
            var loginResult = await AuthService.LoginUserAsync(_model);
            await LocalStorage.SetItemAsync("access_token", loginResult.AccessToken);
            await AuthStateProvider.GetAuthenticationStateAsync();
            Navigation.NavigateTo("/");
        }
        catch (ApiResponseException ex)
        {
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {

            await ErrorHandler.HandleExceptionAsync(ex);
        }
    }

}
