@page "/book/{bookId}"
@inject IBooksService BooksService
@inject IConfiguration Configuration

<PageTitle>Book Details | @_book?.Title</PageTitle>

<h2>@_book?.Title</h2>
<p>@_book?.Description</p>
<ul>
    <li>Price: $@_book?.Price</li>
    <li>Pages: @_book?.PagesCount</li>
    <li>Author: @_book?.AuthorName</li>
    <li>Publishing date: @_book?.PublishingDate</li>
</ul>
@if (_book?.CoverImageUrl != null)
{
    <img class="cover" src="@(apiUrl + "/" +  _book.CoverImageUrl)" />
}
<hr />
<div class="row">
    <div class="col-lg-4 col-sm-12 col-md-6">
        <BookRatingForm OnRatingSubmitted="LoadBookAsync" BookId="@BookId" />
        <hr />
        <h3>Ratings and reviews</h3>
        @if (_book?.Reviews != null && _book.Reviews.Any())
        {
            @foreach (var review in _book.Reviews)
            {
                <div class="mb-3">
                    <Rating StarCount="review.Rating" IsReadOnly="true" />
                    <p class="mt-2">@review.Description</p>
                    <hr />
                    </div>
            }
        }
        else
        {
            <p>No reviews available yet!</p>
        }
    </div>
</div>
@code {
    [Parameter]
    public string? BookId { get; set; }
    private Book? _book = null;
    private string apiUrl;
    protected override async Task OnInitializedAsync()
    {
        apiUrl = Configuration["ApiUrl"];
        await LoadBookAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"The book id is {BookId}");
    }
    private async Task LoadBookAsync()
    {
        _book = await BooksService.GetBookByIdAsync(BookId);
    }

}
