@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting

@inject IConfiguration Configuration
@inject IWebAssemblyHostEnvironment Host
@inject IBooksService BooksService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


@implements IDisposable

<NavigationLock ConfirmExternalNavigation="true" />

<PageTitle>Index | Page @PageNumber</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.



<h3>Available Books</h3>
<div style="display:flex">
    @foreach (var book in _books)
    {
       
        <BookCard Book="book" 
            OnAddToCartClicked="AddToCart"
           
            />
            
    }
</div>
<DataListView TItemType="Book" Items="_books" ColumnsCount="4">
    <ItemTemplate>
        <BookCard Book="@context" OnAddToCartClicked="AddToCart" />
    </ItemTemplate>
</DataListView>

<div class="mt-2">
    <button class="btn btn-primary" @onclick="() =>  GoToPage(1)">
        1
    </button>
    <button class="btn btn-primary" @onclick="() =>  GoToPage(2)">
        2
    </button>
    <button class="btn btn-primary" @onclick="() =>  GoToPage(3)">
        3
    </button>
</div>
@*<BookCard Book="_nonExistent"></BookCard>*@
<h3 class="mt-3">My Cart</h3>
<ul>
    @foreach (var item in _booksCart)
    {
        <li>@item.Title</li>
    }
</ul>

<p>Api Url: @Configuration["ApiUrl"]</p>

@if (!Host.IsDevelopment())
{
    <SurveyPrompt Title="How is Blazor working for you?" />
}

<ModalPopup Title="Hi" IsOpen="@_isWelcomeModalOpen"
    OnCloseClicked="() => _isWelcomeModalOpen = false">
    <ChildContent>
        <p>Welcome to our Books Store, here you will
            find a huge collection of books to help you
            build a career in software development,
            enjoy it!
        </p>
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary"
        @onclick="() => _isWelcomeModalOpen = false">Discover It</button>
    </FooterContent>
</ModalPopup>



@code {
    private List<Book>? _books = new List<Book>();
    private List<Book> _booksCart = new List<Book>();
    // private string? _backStyle ;
    private bool _isWelcomeModalOpen = false;

    [Parameter]
    [SupplyParameterFromQuery(Name ="pageNumber")]
    public int PageNumber { get; set; }

    // private Book? _nonExistent;
    protected override async Task OnInitializedAsync()
    {
        // Call the JS import and pass the path of the
        // external js path that will be placed in the
        // wwwroot folder that will load only the JS
        // code of the requested component
        var module = await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import",
        "./js/scripts.js");
        // From the module JS object, we can call the
        // getRandomBook() method
        var randomBook = await module.InvokeAsync<Book>("getRandomBook");
        Console.WriteLine($"randomBook: {randomBook.Title}\n{randomBook.AuthorName}\n{randomBook.Price}");
        Navigation.LocationChanged += Navigation_LocationChanged;

        _books = await BooksService.GetAllBooksAsync();
    }
    protected override void OnParametersSet()
    {
        if (PageNumber <= 0)
        {
            PageNumber = 1;
        }
    }
    private Book? _firstBook
    {
        get
        {
            return _books.FirstOrDefault();
        }
    }

    private void AddToCart(Book selectedBook)
    {
        _booksCart.Add(selectedBook);
    }

    private void Navigation_LocationChanged(object? sender,
        LocationChangedEventArgs e)
    {
        Console.WriteLine($"The location changed to {e.Location}");
    }
    public void Dispose()
    {
        Navigation.LocationChanged -= Navigation_LocationChanged;
    }
    private void GoToPage(int pageNumber)
    {
        PageNumber = pageNumber;
        Navigation.NavigateTo($"/?pageNumber={pageNumber}");
    }
 
}