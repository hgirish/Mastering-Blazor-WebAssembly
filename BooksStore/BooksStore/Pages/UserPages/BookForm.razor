@page "/book/form"
@using Blazored.LocalStorage;

@inject ILocalStorageService LocalStorage

@implements IDisposable

<PageTitle>BooksStore | Add a new book</PageTitle>

<div class="row">
    <div class="col-6">
        <h2>Add a new book</h2>
        <EditForm Model="_book"
            OnSubmit="HandleBookFormSubmission">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group mt-1">
                <label>Title</label>
                <InputText
                   @bind-Value="@_book.Title"
                    class="form-control"
                     />
                     <ValidationMessage For="() => _book.Title" />
            </div>
            <div class="form-group mt-1">
                <label>Description</label>
                <BlazorSimpleMde @ref="_simpleMde" />
                <ValidationMessage For="() => _book.Description" />
            </div>
            <div class="form-group mt-1">
                <label>Number of pages</label>
                <InputNumber TValue="int"
               @bind-Value="@_book.PagesCount"
                       class="form-control"
                        />
                <ValidationMessage For="() => _book.PagesCount" />
            </div>
            <div class="form-group mt-1">
                <label>Author</label>
                <InputText 
               @bind-Value="@_book.Author"
                       class="form-control"
                        />
                <ValidationMessage For="() => _book.Author" />
            </div>
            <div class="form-group mt-1">
                <label>Price</label>
                <InputNumber TValue="decimal"
               @bind-Value="@_book.Price"
                       class="form-control"
                        />
                <ValidationMessage For="() => _book.Price" />
            </div>
            <div class="form-group mt-1">
                <label>Time</label>
                <InputTime 
                @bind-Value="@_time"
                             class="form-control" />
                <ValidationMessage For="() => _time" />
            </div>
            <div class="form-group mt-1">
               <input type="submit" class="btn btn-success" value="Save" />
            </div>
        </EditForm>
    </div>
</div>


@code {
    private SubmitBook _book = new();
    private TimeOnly _time = new TimeOnly(12, 30, 0);
    private BlazorSimpleMde _simpleMde;
    private System.Timers.Timer _timer = new();

    protected override async Task OnInitializedAsync()
    {
        await CheckSavedStateAsync();
        SetupTimer();
        
    }
    private async Task HandleBookFormSubmission()
    {
        _book.Description = await _simpleMde.GetEditorValueAsync();

        Console.WriteLine($"Book has been submitted successfully");
        Console.WriteLine($"Title: {_book.Title}");
        Console.WriteLine($"Author: {_book.Author}");
        Console.WriteLine($"Pages Count: {_book.PagesCount}");
        Console.WriteLine($"Price: {_book.Price}");
        Console.WriteLine($"Description: {_book.Description}");
        await ClearSavedStateAsync();
    }

    private async Task SaveFormStateAsync()
    {
        _book.Description = await _simpleMde.GetEditorValueAsync();
        Console.WriteLine($"Description : {_book.Description}");
        await LocalStorage.SetItemAsync("book", _book);
    }

    private async Task CheckSavedStateAsync()
    {
        if (await LocalStorage.ContainKeyAsync("book"))
        {
            _book = await LocalStorage.GetItemAsync<SubmitBook>("book");
            Console.WriteLine($"_book.Description: {_book.Description}");
            await _simpleMde.SetEditorValueAsync(_book.Description);
        }
    }
    private async Task ClearSavedStateAsync()
    {
        await LocalStorage.RemoveItemAsync("book");
    }
    private void SetupTimer()
    {
        var second = 1000;
        _timer.Interval = 10 * second;
        _timer.Elapsed += async (sender, e) =>
        {
            await SaveFormStateAsync();
        };
        _timer.Start();
    }
    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }
}
