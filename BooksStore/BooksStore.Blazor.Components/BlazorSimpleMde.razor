@using Microsoft.JSInterop;

@inject IJSRuntime JSRuntime

<textarea></textarea>

@code {
    [Parameter]
    public string? Content { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"firstRender: {firstRender}");
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMarkdownEditor");
            // Call the setMarkdownEditorValue and
            // pass the Content as a parameter to the
            // JS function
            try
            {
               // if (Content != null && !string.IsNullOrWhiteSpace(Content))
                await JSRuntime.InvokeVoidAsync(
                    "setMarkdownEditorValue", Content
                );
            }
            catch 
            {

                // In chapter 11, we will handle this
                // error
                // In real-world code avoid using
                // catch without any logging or
                // handlin
            }
        }
    }

    public async Task<string> GetEditorValueAsync()
    {
        return await JSRuntime.InvokeAsync<string>("getMarkdownEditorValue");
    }
    public async Task<string> SetEditorValueAsync(string content)
    {
        return await JSRuntime.InvokeAsync<string>("setMarkdownEditorValue", content);
    }
}
